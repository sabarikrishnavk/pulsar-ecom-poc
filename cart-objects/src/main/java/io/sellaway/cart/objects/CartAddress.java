/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.sellaway.cart.objects;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CartAddress extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6388481663054976559L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CartAddress\",\"namespace\":\"io.sellaway.cart.objects\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\",\"doc\":\"Order Identifier\",\"default\":\"\"},{\"name\":\"address\",\"type\":\"string\",\"doc\":\"Address Line 1\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"zipcode\",\"type\":\"string\"},{\"name\":\"addressType\",\"type\":{\"type\":\"enum\",\"name\":\"AddressType\",\"symbols\":[\"shipping\",\"billing\",\"shippingbilling\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CartAddress> ENCODER =
      new BinaryMessageEncoder<CartAddress>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CartAddress> DECODER =
      new BinaryMessageDecoder<CartAddress>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CartAddress> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CartAddress> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CartAddress> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CartAddress>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CartAddress to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CartAddress from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CartAddress instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CartAddress fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Order Identifier */
  @Deprecated public java.lang.CharSequence orderId;
  /** Address Line 1 */
  @Deprecated public java.lang.CharSequence address;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public java.lang.CharSequence state;
  @Deprecated public java.lang.CharSequence zipcode;
  @Deprecated public io.sellaway.cart.objects.AddressType addressType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CartAddress() {}

  /**
   * All-args constructor.
   * @param orderId Order Identifier
   * @param address Address Line 1
   * @param city The new value for city
   * @param state The new value for state
   * @param zipcode The new value for zipcode
   * @param addressType The new value for addressType
   */
  public CartAddress(java.lang.CharSequence orderId, java.lang.CharSequence address, java.lang.CharSequence city, java.lang.CharSequence state, java.lang.CharSequence zipcode, io.sellaway.cart.objects.AddressType addressType) {
    this.orderId = orderId;
    this.address = address;
    this.city = city;
    this.state = state;
    this.zipcode = zipcode;
    this.addressType = addressType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return address;
    case 2: return city;
    case 3: return state;
    case 4: return zipcode;
    case 5: return addressType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.CharSequence)value$; break;
    case 1: address = (java.lang.CharSequence)value$; break;
    case 2: city = (java.lang.CharSequence)value$; break;
    case 3: state = (java.lang.CharSequence)value$; break;
    case 4: zipcode = (java.lang.CharSequence)value$; break;
    case 5: addressType = (io.sellaway.cart.objects.AddressType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return Order Identifier
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * Order Identifier
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return Address Line 1
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * Address Line 1
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'zipcode' field.
   * @return The value of the 'zipcode' field.
   */
  public java.lang.CharSequence getZipcode() {
    return zipcode;
  }


  /**
   * Sets the value of the 'zipcode' field.
   * @param value the value to set.
   */
  public void setZipcode(java.lang.CharSequence value) {
    this.zipcode = value;
  }

  /**
   * Gets the value of the 'addressType' field.
   * @return The value of the 'addressType' field.
   */
  public io.sellaway.cart.objects.AddressType getAddressType() {
    return addressType;
  }


  /**
   * Sets the value of the 'addressType' field.
   * @param value the value to set.
   */
  public void setAddressType(io.sellaway.cart.objects.AddressType value) {
    this.addressType = value;
  }

  /**
   * Creates a new CartAddress RecordBuilder.
   * @return A new CartAddress RecordBuilder
   */
  public static io.sellaway.cart.objects.CartAddress.Builder newBuilder() {
    return new io.sellaway.cart.objects.CartAddress.Builder();
  }

  /**
   * Creates a new CartAddress RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CartAddress RecordBuilder
   */
  public static io.sellaway.cart.objects.CartAddress.Builder newBuilder(io.sellaway.cart.objects.CartAddress.Builder other) {
    if (other == null) {
      return new io.sellaway.cart.objects.CartAddress.Builder();
    } else {
      return new io.sellaway.cart.objects.CartAddress.Builder(other);
    }
  }

  /**
   * Creates a new CartAddress RecordBuilder by copying an existing CartAddress instance.
   * @param other The existing instance to copy.
   * @return A new CartAddress RecordBuilder
   */
  public static io.sellaway.cart.objects.CartAddress.Builder newBuilder(io.sellaway.cart.objects.CartAddress other) {
    if (other == null) {
      return new io.sellaway.cart.objects.CartAddress.Builder();
    } else {
      return new io.sellaway.cart.objects.CartAddress.Builder(other);
    }
  }

  /**
   * RecordBuilder for CartAddress instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CartAddress>
    implements org.apache.avro.data.RecordBuilder<CartAddress> {

    /** Order Identifier */
    private java.lang.CharSequence orderId;
    /** Address Line 1 */
    private java.lang.CharSequence address;
    private java.lang.CharSequence city;
    private java.lang.CharSequence state;
    private java.lang.CharSequence zipcode;
    private io.sellaway.cart.objects.AddressType addressType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.sellaway.cart.objects.CartAddress.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.address)) {
        this.address = data().deepCopy(fields()[1].schema(), other.address);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.zipcode)) {
        this.zipcode = data().deepCopy(fields()[4].schema(), other.zipcode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.addressType)) {
        this.addressType = data().deepCopy(fields()[5].schema(), other.addressType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing CartAddress instance
     * @param other The existing instance to copy.
     */
    private Builder(io.sellaway.cart.objects.CartAddress other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.address)) {
        this.address = data().deepCopy(fields()[1].schema(), other.address);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.zipcode)) {
        this.zipcode = data().deepCopy(fields()[4].schema(), other.zipcode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.addressType)) {
        this.addressType = data().deepCopy(fields()[5].schema(), other.addressType);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * Order Identifier
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * Order Identifier
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * Order Identifier
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * Order Identifier
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * Address Line 1
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * Address Line 1
      * @param value The value of 'address'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.address = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * Address Line 1
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'address' field.
      * Address Line 1
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder clearAddress() {
      address = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.city = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder clearCity() {
      city = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder setState(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.state = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder clearState() {
      state = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'zipcode' field.
      * @return The value.
      */
    public java.lang.CharSequence getZipcode() {
      return zipcode;
    }


    /**
      * Sets the value of the 'zipcode' field.
      * @param value The value of 'zipcode'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder setZipcode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.zipcode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'zipcode' field has been set.
      * @return True if the 'zipcode' field has been set, false otherwise.
      */
    public boolean hasZipcode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'zipcode' field.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder clearZipcode() {
      zipcode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressType' field.
      * @return The value.
      */
    public io.sellaway.cart.objects.AddressType getAddressType() {
      return addressType;
    }


    /**
      * Sets the value of the 'addressType' field.
      * @param value The value of 'addressType'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder setAddressType(io.sellaway.cart.objects.AddressType value) {
      validate(fields()[5], value);
      this.addressType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'addressType' field has been set.
      * @return True if the 'addressType' field has been set, false otherwise.
      */
    public boolean hasAddressType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'addressType' field.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartAddress.Builder clearAddressType() {
      addressType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CartAddress build() {
      try {
        CartAddress record = new CartAddress();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.address = fieldSetFlags()[1] ? this.address : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.city = fieldSetFlags()[2] ? this.city : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.state = fieldSetFlags()[3] ? this.state : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.zipcode = fieldSetFlags()[4] ? this.zipcode : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.addressType = fieldSetFlags()[5] ? this.addressType : (io.sellaway.cart.objects.AddressType) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CartAddress>
    WRITER$ = (org.apache.avro.io.DatumWriter<CartAddress>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CartAddress>
    READER$ = (org.apache.avro.io.DatumReader<CartAddress>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.orderId);

    out.writeString(this.address);

    out.writeString(this.city);

    out.writeString(this.state);

    out.writeString(this.zipcode);

    out.writeEnum(this.addressType.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);

      this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);

      this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);

      this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);

      this.zipcode = in.readString(this.zipcode instanceof Utf8 ? (Utf8)this.zipcode : null);

      this.addressType = io.sellaway.cart.objects.AddressType.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);
          break;

        case 1:
          this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);
          break;

        case 2:
          this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          break;

        case 3:
          this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
          break;

        case 4:
          this.zipcode = in.readString(this.zipcode instanceof Utf8 ? (Utf8)this.zipcode : null);
          break;

        case 5:
          this.addressType = io.sellaway.cart.objects.AddressType.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










