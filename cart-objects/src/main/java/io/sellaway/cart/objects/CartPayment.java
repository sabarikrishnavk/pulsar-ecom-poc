/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.sellaway.cart.objects;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CartPayment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3115491606901997141L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CartPayment\",\"namespace\":\"io.sellaway.cart.objects\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\",\"doc\":\"Order Identifier\",\"default\":\"\"},{\"name\":\"paymentReference\",\"type\":\"string\",\"doc\":\"Payment reference\"},{\"name\":\"paymentType\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentType\",\"symbols\":[\"Visa\",\"MasterCard\",\"Discover\",\"Amex\",\"Giftcard\"]}},{\"name\":\"walletType\",\"type\":{\"type\":\"enum\",\"name\":\"WalletType\",\"symbols\":[\"ApplePay\",\"Paypal\"]}},{\"name\":\"amount\",\"type\":\"double\",\"doc\":\"amount charged on payment \"},{\"name\":\"paymentProperties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Payment properties properties :key value \"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CartPayment> ENCODER =
      new BinaryMessageEncoder<CartPayment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CartPayment> DECODER =
      new BinaryMessageDecoder<CartPayment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CartPayment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CartPayment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CartPayment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CartPayment>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CartPayment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CartPayment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CartPayment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CartPayment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Order Identifier */
  @Deprecated public java.lang.CharSequence orderId;
  /** Payment reference */
  @Deprecated public java.lang.CharSequence paymentReference;
  @Deprecated public io.sellaway.cart.objects.PaymentType paymentType;
  @Deprecated public io.sellaway.cart.objects.WalletType walletType;
  /** amount charged on payment  */
  @Deprecated public double amount;
  /** Payment properties properties :key value  */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> paymentProperties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CartPayment() {}

  /**
   * All-args constructor.
   * @param orderId Order Identifier
   * @param paymentReference Payment reference
   * @param paymentType The new value for paymentType
   * @param walletType The new value for walletType
   * @param amount amount charged on payment 
   * @param paymentProperties Payment properties properties :key value 
   */
  public CartPayment(java.lang.CharSequence orderId, java.lang.CharSequence paymentReference, io.sellaway.cart.objects.PaymentType paymentType, io.sellaway.cart.objects.WalletType walletType, java.lang.Double amount, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> paymentProperties) {
    this.orderId = orderId;
    this.paymentReference = paymentReference;
    this.paymentType = paymentType;
    this.walletType = walletType;
    this.amount = amount;
    this.paymentProperties = paymentProperties;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return paymentReference;
    case 2: return paymentType;
    case 3: return walletType;
    case 4: return amount;
    case 5: return paymentProperties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.CharSequence)value$; break;
    case 1: paymentReference = (java.lang.CharSequence)value$; break;
    case 2: paymentType = (io.sellaway.cart.objects.PaymentType)value$; break;
    case 3: walletType = (io.sellaway.cart.objects.WalletType)value$; break;
    case 4: amount = (java.lang.Double)value$; break;
    case 5: paymentProperties = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return Order Identifier
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * Order Identifier
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'paymentReference' field.
   * @return Payment reference
   */
  public java.lang.CharSequence getPaymentReference() {
    return paymentReference;
  }


  /**
   * Sets the value of the 'paymentReference' field.
   * Payment reference
   * @param value the value to set.
   */
  public void setPaymentReference(java.lang.CharSequence value) {
    this.paymentReference = value;
  }

  /**
   * Gets the value of the 'paymentType' field.
   * @return The value of the 'paymentType' field.
   */
  public io.sellaway.cart.objects.PaymentType getPaymentType() {
    return paymentType;
  }


  /**
   * Sets the value of the 'paymentType' field.
   * @param value the value to set.
   */
  public void setPaymentType(io.sellaway.cart.objects.PaymentType value) {
    this.paymentType = value;
  }

  /**
   * Gets the value of the 'walletType' field.
   * @return The value of the 'walletType' field.
   */
  public io.sellaway.cart.objects.WalletType getWalletType() {
    return walletType;
  }


  /**
   * Sets the value of the 'walletType' field.
   * @param value the value to set.
   */
  public void setWalletType(io.sellaway.cart.objects.WalletType value) {
    this.walletType = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return amount charged on payment 
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * amount charged on payment 
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'paymentProperties' field.
   * @return Payment properties properties :key value 
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getPaymentProperties() {
    return paymentProperties;
  }


  /**
   * Sets the value of the 'paymentProperties' field.
   * Payment properties properties :key value 
   * @param value the value to set.
   */
  public void setPaymentProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.paymentProperties = value;
  }

  /**
   * Creates a new CartPayment RecordBuilder.
   * @return A new CartPayment RecordBuilder
   */
  public static io.sellaway.cart.objects.CartPayment.Builder newBuilder() {
    return new io.sellaway.cart.objects.CartPayment.Builder();
  }

  /**
   * Creates a new CartPayment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CartPayment RecordBuilder
   */
  public static io.sellaway.cart.objects.CartPayment.Builder newBuilder(io.sellaway.cart.objects.CartPayment.Builder other) {
    if (other == null) {
      return new io.sellaway.cart.objects.CartPayment.Builder();
    } else {
      return new io.sellaway.cart.objects.CartPayment.Builder(other);
    }
  }

  /**
   * Creates a new CartPayment RecordBuilder by copying an existing CartPayment instance.
   * @param other The existing instance to copy.
   * @return A new CartPayment RecordBuilder
   */
  public static io.sellaway.cart.objects.CartPayment.Builder newBuilder(io.sellaway.cart.objects.CartPayment other) {
    if (other == null) {
      return new io.sellaway.cart.objects.CartPayment.Builder();
    } else {
      return new io.sellaway.cart.objects.CartPayment.Builder(other);
    }
  }

  /**
   * RecordBuilder for CartPayment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CartPayment>
    implements org.apache.avro.data.RecordBuilder<CartPayment> {

    /** Order Identifier */
    private java.lang.CharSequence orderId;
    /** Payment reference */
    private java.lang.CharSequence paymentReference;
    private io.sellaway.cart.objects.PaymentType paymentType;
    private io.sellaway.cart.objects.WalletType walletType;
    /** amount charged on payment  */
    private double amount;
    /** Payment properties properties :key value  */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> paymentProperties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.sellaway.cart.objects.CartPayment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.paymentReference)) {
        this.paymentReference = data().deepCopy(fields()[1].schema(), other.paymentReference);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.paymentType)) {
        this.paymentType = data().deepCopy(fields()[2].schema(), other.paymentType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.walletType)) {
        this.walletType = data().deepCopy(fields()[3].schema(), other.walletType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.paymentProperties)) {
        this.paymentProperties = data().deepCopy(fields()[5].schema(), other.paymentProperties);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing CartPayment instance
     * @param other The existing instance to copy.
     */
    private Builder(io.sellaway.cart.objects.CartPayment other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.paymentReference)) {
        this.paymentReference = data().deepCopy(fields()[1].schema(), other.paymentReference);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.paymentType)) {
        this.paymentType = data().deepCopy(fields()[2].schema(), other.paymentType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.walletType)) {
        this.walletType = data().deepCopy(fields()[3].schema(), other.walletType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.paymentProperties)) {
        this.paymentProperties = data().deepCopy(fields()[5].schema(), other.paymentProperties);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * Order Identifier
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * Order Identifier
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * Order Identifier
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * Order Identifier
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentReference' field.
      * Payment reference
      * @return The value.
      */
    public java.lang.CharSequence getPaymentReference() {
      return paymentReference;
    }


    /**
      * Sets the value of the 'paymentReference' field.
      * Payment reference
      * @param value The value of 'paymentReference'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder setPaymentReference(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.paymentReference = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentReference' field has been set.
      * Payment reference
      * @return True if the 'paymentReference' field has been set, false otherwise.
      */
    public boolean hasPaymentReference() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'paymentReference' field.
      * Payment reference
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder clearPaymentReference() {
      paymentReference = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentType' field.
      * @return The value.
      */
    public io.sellaway.cart.objects.PaymentType getPaymentType() {
      return paymentType;
    }


    /**
      * Sets the value of the 'paymentType' field.
      * @param value The value of 'paymentType'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder setPaymentType(io.sellaway.cart.objects.PaymentType value) {
      validate(fields()[2], value);
      this.paymentType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentType' field has been set.
      * @return True if the 'paymentType' field has been set, false otherwise.
      */
    public boolean hasPaymentType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'paymentType' field.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder clearPaymentType() {
      paymentType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'walletType' field.
      * @return The value.
      */
    public io.sellaway.cart.objects.WalletType getWalletType() {
      return walletType;
    }


    /**
      * Sets the value of the 'walletType' field.
      * @param value The value of 'walletType'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder setWalletType(io.sellaway.cart.objects.WalletType value) {
      validate(fields()[3], value);
      this.walletType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'walletType' field has been set.
      * @return True if the 'walletType' field has been set, false otherwise.
      */
    public boolean hasWalletType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'walletType' field.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder clearWalletType() {
      walletType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * amount charged on payment 
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * amount charged on payment 
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder setAmount(double value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * amount charged on payment 
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * amount charged on payment 
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder clearAmount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentProperties' field.
      * Payment properties properties :key value 
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getPaymentProperties() {
      return paymentProperties;
    }


    /**
      * Sets the value of the 'paymentProperties' field.
      * Payment properties properties :key value 
      * @param value The value of 'paymentProperties'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder setPaymentProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.paymentProperties = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentProperties' field has been set.
      * Payment properties properties :key value 
      * @return True if the 'paymentProperties' field has been set, false otherwise.
      */
    public boolean hasPaymentProperties() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'paymentProperties' field.
      * Payment properties properties :key value 
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartPayment.Builder clearPaymentProperties() {
      paymentProperties = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CartPayment build() {
      try {
        CartPayment record = new CartPayment();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.paymentReference = fieldSetFlags()[1] ? this.paymentReference : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.paymentType = fieldSetFlags()[2] ? this.paymentType : (io.sellaway.cart.objects.PaymentType) defaultValue(fields()[2]);
        record.walletType = fieldSetFlags()[3] ? this.walletType : (io.sellaway.cart.objects.WalletType) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (java.lang.Double) defaultValue(fields()[4]);
        record.paymentProperties = fieldSetFlags()[5] ? this.paymentProperties : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CartPayment>
    WRITER$ = (org.apache.avro.io.DatumWriter<CartPayment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CartPayment>
    READER$ = (org.apache.avro.io.DatumReader<CartPayment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.orderId);

    out.writeString(this.paymentReference);

    out.writeEnum(this.paymentType.ordinal());

    out.writeEnum(this.walletType.ordinal());

    out.writeDouble(this.amount);

    if (this.paymentProperties == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.paymentProperties.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.paymentProperties.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        java.lang.CharSequence v0 = e0.getValue();
        out.writeString(v0);
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);

      this.paymentReference = in.readString(this.paymentReference instanceof Utf8 ? (Utf8)this.paymentReference : null);

      this.paymentType = io.sellaway.cart.objects.PaymentType.values()[in.readEnum()];

      this.walletType = io.sellaway.cart.objects.WalletType.values()[in.readEnum()];

      this.amount = in.readDouble();

      if (in.readIndex() != 1) {
        in.readNull();
        this.paymentProperties = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.paymentProperties; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
          this.paymentProperties = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence k0 = null;
            k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
            java.lang.CharSequence v0 = null;
            v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
            m0.put(k0, v0);
          }
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);
          break;

        case 1:
          this.paymentReference = in.readString(this.paymentReference instanceof Utf8 ? (Utf8)this.paymentReference : null);
          break;

        case 2:
          this.paymentType = io.sellaway.cart.objects.PaymentType.values()[in.readEnum()];
          break;

        case 3:
          this.walletType = io.sellaway.cart.objects.WalletType.values()[in.readEnum()];
          break;

        case 4:
          this.amount = in.readDouble();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.paymentProperties = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.paymentProperties; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
              this.paymentProperties = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
                java.lang.CharSequence v0 = null;
                v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
                m0.put(k0, v0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










