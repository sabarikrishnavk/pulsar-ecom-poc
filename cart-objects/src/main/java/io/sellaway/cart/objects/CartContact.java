/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.sellaway.cart.objects;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CartContact extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3311456762375550996L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CartContact\",\"namespace\":\"io.sellaway.cart.objects\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\",\"doc\":\"Order Identifier\",\"default\":\"\"},{\"name\":\"firstName\",\"type\":\"string\",\"doc\":\"Customer's first name\"},{\"name\":\"lastName\",\"type\":\"string\",\"doc\":\"Customer's last name\"},{\"name\":\"email\",\"type\":[\"null\",\"string\"],\"doc\":\"Customer Email Addresses\"},{\"name\":\"phone\",\"type\":[\"null\",\"string\"],\"doc\":\"Customer phone\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CartContact> ENCODER =
      new BinaryMessageEncoder<CartContact>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CartContact> DECODER =
      new BinaryMessageDecoder<CartContact>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CartContact> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CartContact> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CartContact> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CartContact>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CartContact to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CartContact from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CartContact instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CartContact fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Order Identifier */
  @Deprecated public java.lang.CharSequence orderId;
  /** Customer's first name */
  @Deprecated public java.lang.CharSequence firstName;
  /** Customer's last name */
  @Deprecated public java.lang.CharSequence lastName;
  /** Customer Email Addresses */
  @Deprecated public java.lang.CharSequence email;
  /** Customer phone */
  @Deprecated public java.lang.CharSequence phone;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CartContact() {}

  /**
   * All-args constructor.
   * @param orderId Order Identifier
   * @param firstName Customer's first name
   * @param lastName Customer's last name
   * @param email Customer Email Addresses
   * @param phone Customer phone
   */
  public CartContact(java.lang.CharSequence orderId, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.CharSequence email, java.lang.CharSequence phone) {
    this.orderId = orderId;
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.phone = phone;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return firstName;
    case 2: return lastName;
    case 3: return email;
    case 4: return phone;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.CharSequence)value$; break;
    case 1: firstName = (java.lang.CharSequence)value$; break;
    case 2: lastName = (java.lang.CharSequence)value$; break;
    case 3: email = (java.lang.CharSequence)value$; break;
    case 4: phone = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return Order Identifier
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * Order Identifier
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return Customer's first name
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * Customer's first name
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return Customer's last name
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * Customer's last name
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return Customer Email Addresses
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * Customer Email Addresses
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'phone' field.
   * @return Customer phone
   */
  public java.lang.CharSequence getPhone() {
    return phone;
  }


  /**
   * Sets the value of the 'phone' field.
   * Customer phone
   * @param value the value to set.
   */
  public void setPhone(java.lang.CharSequence value) {
    this.phone = value;
  }

  /**
   * Creates a new CartContact RecordBuilder.
   * @return A new CartContact RecordBuilder
   */
  public static io.sellaway.cart.objects.CartContact.Builder newBuilder() {
    return new io.sellaway.cart.objects.CartContact.Builder();
  }

  /**
   * Creates a new CartContact RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CartContact RecordBuilder
   */
  public static io.sellaway.cart.objects.CartContact.Builder newBuilder(io.sellaway.cart.objects.CartContact.Builder other) {
    if (other == null) {
      return new io.sellaway.cart.objects.CartContact.Builder();
    } else {
      return new io.sellaway.cart.objects.CartContact.Builder(other);
    }
  }

  /**
   * Creates a new CartContact RecordBuilder by copying an existing CartContact instance.
   * @param other The existing instance to copy.
   * @return A new CartContact RecordBuilder
   */
  public static io.sellaway.cart.objects.CartContact.Builder newBuilder(io.sellaway.cart.objects.CartContact other) {
    if (other == null) {
      return new io.sellaway.cart.objects.CartContact.Builder();
    } else {
      return new io.sellaway.cart.objects.CartContact.Builder(other);
    }
  }

  /**
   * RecordBuilder for CartContact instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CartContact>
    implements org.apache.avro.data.RecordBuilder<CartContact> {

    /** Order Identifier */
    private java.lang.CharSequence orderId;
    /** Customer's first name */
    private java.lang.CharSequence firstName;
    /** Customer's last name */
    private java.lang.CharSequence lastName;
    /** Customer Email Addresses */
    private java.lang.CharSequence email;
    /** Customer phone */
    private java.lang.CharSequence phone;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.sellaway.cart.objects.CartContact.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.phone)) {
        this.phone = data().deepCopy(fields()[4].schema(), other.phone);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing CartContact instance
     * @param other The existing instance to copy.
     */
    private Builder(io.sellaway.cart.objects.CartContact other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.phone)) {
        this.phone = data().deepCopy(fields()[4].schema(), other.phone);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * Order Identifier
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * Order Identifier
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartContact.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * Order Identifier
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * Order Identifier
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartContact.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * Customer's first name
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * Customer's first name
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartContact.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.firstName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * Customer's first name
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'firstName' field.
      * Customer's first name
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartContact.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * Customer's last name
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * Customer's last name
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartContact.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lastName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * Customer's last name
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastName' field.
      * Customer's last name
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartContact.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * Customer Email Addresses
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * Customer Email Addresses
      * @param value The value of 'email'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartContact.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * Customer Email Addresses
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'email' field.
      * Customer Email Addresses
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartContact.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'phone' field.
      * Customer phone
      * @return The value.
      */
    public java.lang.CharSequence getPhone() {
      return phone;
    }


    /**
      * Sets the value of the 'phone' field.
      * Customer phone
      * @param value The value of 'phone'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartContact.Builder setPhone(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.phone = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'phone' field has been set.
      * Customer phone
      * @return True if the 'phone' field has been set, false otherwise.
      */
    public boolean hasPhone() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'phone' field.
      * Customer phone
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartContact.Builder clearPhone() {
      phone = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CartContact build() {
      try {
        CartContact record = new CartContact();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.firstName = fieldSetFlags()[1] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lastName = fieldSetFlags()[2] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.phone = fieldSetFlags()[4] ? this.phone : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CartContact>
    WRITER$ = (org.apache.avro.io.DatumWriter<CartContact>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CartContact>
    READER$ = (org.apache.avro.io.DatumReader<CartContact>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.orderId);

    out.writeString(this.firstName);

    out.writeString(this.lastName);

    if (this.email == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.email);
    }

    if (this.phone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.phone);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);

      this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);

      this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.email = null;
      } else {
        this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.phone = null;
      } else {
        this.phone = in.readString(this.phone instanceof Utf8 ? (Utf8)this.phone : null);
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);
          break;

        case 1:
          this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);
          break;

        case 2:
          this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.email = null;
          } else {
            this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.phone = null;
          } else {
            this.phone = in.readString(this.phone instanceof Utf8 ? (Utf8)this.phone : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










