/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.sellaway.cart.objects;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CartSummary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1660629860553658428L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CartSummary\",\"namespace\":\"io.sellaway.cart.objects\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\",\"doc\":\"Order Identifier\",\"default\":\"\"},{\"name\":\"discount\",\"type\":\"double\",\"doc\":\"total Discount  \"},{\"name\":\"price\",\"type\":\"double\",\"doc\":\"total sku price \"},{\"name\":\"shipping\",\"type\":\"double\",\"doc\":\"total shipping charge \"},{\"name\":\"quantity\",\"type\":\"double\",\"doc\":\"total quantity purchased \"},{\"name\":\"lines\",\"type\":\"int\",\"doc\":\"total line items purchased \"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CartSummary> ENCODER =
      new BinaryMessageEncoder<CartSummary>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CartSummary> DECODER =
      new BinaryMessageDecoder<CartSummary>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CartSummary> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CartSummary> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CartSummary> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CartSummary>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CartSummary to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CartSummary from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CartSummary instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CartSummary fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Order Identifier */
  @Deprecated public java.lang.CharSequence orderId;
  /** total Discount   */
  @Deprecated public double discount;
  /** total sku price  */
  @Deprecated public double price;
  /** total shipping charge  */
  @Deprecated public double shipping;
  /** total quantity purchased  */
  @Deprecated public double quantity;
  /** total line items purchased  */
  @Deprecated public int lines;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CartSummary() {}

  /**
   * All-args constructor.
   * @param orderId Order Identifier
   * @param discount total Discount  
   * @param price total sku price 
   * @param shipping total shipping charge 
   * @param quantity total quantity purchased 
   * @param lines total line items purchased 
   */
  public CartSummary(java.lang.CharSequence orderId, java.lang.Double discount, java.lang.Double price, java.lang.Double shipping, java.lang.Double quantity, java.lang.Integer lines) {
    this.orderId = orderId;
    this.discount = discount;
    this.price = price;
    this.shipping = shipping;
    this.quantity = quantity;
    this.lines = lines;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return discount;
    case 2: return price;
    case 3: return shipping;
    case 4: return quantity;
    case 5: return lines;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.CharSequence)value$; break;
    case 1: discount = (java.lang.Double)value$; break;
    case 2: price = (java.lang.Double)value$; break;
    case 3: shipping = (java.lang.Double)value$; break;
    case 4: quantity = (java.lang.Double)value$; break;
    case 5: lines = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return Order Identifier
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * Order Identifier
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'discount' field.
   * @return total Discount  
   */
  public double getDiscount() {
    return discount;
  }


  /**
   * Sets the value of the 'discount' field.
   * total Discount  
   * @param value the value to set.
   */
  public void setDiscount(double value) {
    this.discount = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return total sku price 
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * total sku price 
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'shipping' field.
   * @return total shipping charge 
   */
  public double getShipping() {
    return shipping;
  }


  /**
   * Sets the value of the 'shipping' field.
   * total shipping charge 
   * @param value the value to set.
   */
  public void setShipping(double value) {
    this.shipping = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return total quantity purchased 
   */
  public double getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * total quantity purchased 
   * @param value the value to set.
   */
  public void setQuantity(double value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'lines' field.
   * @return total line items purchased 
   */
  public int getLines() {
    return lines;
  }


  /**
   * Sets the value of the 'lines' field.
   * total line items purchased 
   * @param value the value to set.
   */
  public void setLines(int value) {
    this.lines = value;
  }

  /**
   * Creates a new CartSummary RecordBuilder.
   * @return A new CartSummary RecordBuilder
   */
  public static io.sellaway.cart.objects.CartSummary.Builder newBuilder() {
    return new io.sellaway.cart.objects.CartSummary.Builder();
  }

  /**
   * Creates a new CartSummary RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CartSummary RecordBuilder
   */
  public static io.sellaway.cart.objects.CartSummary.Builder newBuilder(io.sellaway.cart.objects.CartSummary.Builder other) {
    if (other == null) {
      return new io.sellaway.cart.objects.CartSummary.Builder();
    } else {
      return new io.sellaway.cart.objects.CartSummary.Builder(other);
    }
  }

  /**
   * Creates a new CartSummary RecordBuilder by copying an existing CartSummary instance.
   * @param other The existing instance to copy.
   * @return A new CartSummary RecordBuilder
   */
  public static io.sellaway.cart.objects.CartSummary.Builder newBuilder(io.sellaway.cart.objects.CartSummary other) {
    if (other == null) {
      return new io.sellaway.cart.objects.CartSummary.Builder();
    } else {
      return new io.sellaway.cart.objects.CartSummary.Builder(other);
    }
  }

  /**
   * RecordBuilder for CartSummary instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CartSummary>
    implements org.apache.avro.data.RecordBuilder<CartSummary> {

    /** Order Identifier */
    private java.lang.CharSequence orderId;
    /** total Discount   */
    private double discount;
    /** total sku price  */
    private double price;
    /** total shipping charge  */
    private double shipping;
    /** total quantity purchased  */
    private double quantity;
    /** total line items purchased  */
    private int lines;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.sellaway.cart.objects.CartSummary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.discount)) {
        this.discount = data().deepCopy(fields()[1].schema(), other.discount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.shipping)) {
        this.shipping = data().deepCopy(fields()[3].schema(), other.shipping);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.quantity)) {
        this.quantity = data().deepCopy(fields()[4].schema(), other.quantity);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lines)) {
        this.lines = data().deepCopy(fields()[5].schema(), other.lines);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing CartSummary instance
     * @param other The existing instance to copy.
     */
    private Builder(io.sellaway.cart.objects.CartSummary other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.discount)) {
        this.discount = data().deepCopy(fields()[1].schema(), other.discount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.shipping)) {
        this.shipping = data().deepCopy(fields()[3].schema(), other.shipping);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.quantity)) {
        this.quantity = data().deepCopy(fields()[4].schema(), other.quantity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lines)) {
        this.lines = data().deepCopy(fields()[5].schema(), other.lines);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * Order Identifier
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * Order Identifier
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * Order Identifier
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * Order Identifier
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'discount' field.
      * total Discount  
      * @return The value.
      */
    public double getDiscount() {
      return discount;
    }


    /**
      * Sets the value of the 'discount' field.
      * total Discount  
      * @param value The value of 'discount'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder setDiscount(double value) {
      validate(fields()[1], value);
      this.discount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'discount' field has been set.
      * total Discount  
      * @return True if the 'discount' field has been set, false otherwise.
      */
    public boolean hasDiscount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'discount' field.
      * total Discount  
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder clearDiscount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * total sku price 
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * total sku price 
      * @param value The value of 'price'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder setPrice(double value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * total sku price 
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'price' field.
      * total sku price 
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder clearPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'shipping' field.
      * total shipping charge 
      * @return The value.
      */
    public double getShipping() {
      return shipping;
    }


    /**
      * Sets the value of the 'shipping' field.
      * total shipping charge 
      * @param value The value of 'shipping'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder setShipping(double value) {
      validate(fields()[3], value);
      this.shipping = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'shipping' field has been set.
      * total shipping charge 
      * @return True if the 'shipping' field has been set, false otherwise.
      */
    public boolean hasShipping() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'shipping' field.
      * total shipping charge 
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder clearShipping() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * total quantity purchased 
      * @return The value.
      */
    public double getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * total quantity purchased 
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder setQuantity(double value) {
      validate(fields()[4], value);
      this.quantity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * total quantity purchased 
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'quantity' field.
      * total quantity purchased 
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder clearQuantity() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lines' field.
      * total line items purchased 
      * @return The value.
      */
    public int getLines() {
      return lines;
    }


    /**
      * Sets the value of the 'lines' field.
      * total line items purchased 
      * @param value The value of 'lines'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder setLines(int value) {
      validate(fields()[5], value);
      this.lines = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lines' field has been set.
      * total line items purchased 
      * @return True if the 'lines' field has been set, false otherwise.
      */
    public boolean hasLines() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lines' field.
      * total line items purchased 
      * @return This builder.
      */
    public io.sellaway.cart.objects.CartSummary.Builder clearLines() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CartSummary build() {
      try {
        CartSummary record = new CartSummary();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.discount = fieldSetFlags()[1] ? this.discount : (java.lang.Double) defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price : (java.lang.Double) defaultValue(fields()[2]);
        record.shipping = fieldSetFlags()[3] ? this.shipping : (java.lang.Double) defaultValue(fields()[3]);
        record.quantity = fieldSetFlags()[4] ? this.quantity : (java.lang.Double) defaultValue(fields()[4]);
        record.lines = fieldSetFlags()[5] ? this.lines : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CartSummary>
    WRITER$ = (org.apache.avro.io.DatumWriter<CartSummary>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CartSummary>
    READER$ = (org.apache.avro.io.DatumReader<CartSummary>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.orderId);

    out.writeDouble(this.discount);

    out.writeDouble(this.price);

    out.writeDouble(this.shipping);

    out.writeDouble(this.quantity);

    out.writeInt(this.lines);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);

      this.discount = in.readDouble();

      this.price = in.readDouble();

      this.shipping = in.readDouble();

      this.quantity = in.readDouble();

      this.lines = in.readInt();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);
          break;

        case 1:
          this.discount = in.readDouble();
          break;

        case 2:
          this.price = in.readDouble();
          break;

        case 3:
          this.shipping = in.readDouble();
          break;

        case 4:
          this.quantity = in.readDouble();
          break;

        case 5:
          this.lines = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










