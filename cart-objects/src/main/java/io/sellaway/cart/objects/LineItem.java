/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.sellaway.cart.objects;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LineItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6608329624124715889L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LineItem\",\"namespace\":\"io.sellaway.cart.objects\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\",\"doc\":\"Order Identifier\",\"default\":\"\"},{\"name\":\"lineNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"lineNumber\",\"default\":null},{\"name\":\"sku\",\"type\":\"string\",\"doc\":\"SKU \",\"default\":\"\"},{\"name\":\"fulfillZipCode\",\"type\":[\"null\",\"string\"],\"doc\":\"Fufilling Zipcode \",\"default\":null},{\"name\":\"shippingMethod\",\"type\":{\"type\":\"enum\",\"name\":\"ShippingMethodType\",\"symbols\":[\"bopis\",\"standard\",\"twoday\",\"nextday\"]}},{\"name\":\"originalPrice\",\"type\":\"double\",\"doc\":\"original Price  \",\"default\":0.0},{\"name\":\"discount\",\"type\":\"double\",\"doc\":\"Discount  \",\"default\":0.0},{\"name\":\"sellingPrice\",\"type\":\"double\",\"doc\":\"sellingPrice = originalPrice - discount \",\"default\":0.0},{\"name\":\"price\",\"type\":\"double\",\"doc\":\"price = sellingPrice * qty \",\"default\":0.0},{\"name\":\"quantity\",\"type\":\"double\",\"doc\":\"quantity purchased \",\"default\":0.0},{\"name\":\"lineItemProperties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Line Item properties :key value \"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LineItem> ENCODER =
      new BinaryMessageEncoder<LineItem>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LineItem> DECODER =
      new BinaryMessageDecoder<LineItem>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LineItem> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LineItem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LineItem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LineItem>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LineItem to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LineItem from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LineItem instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LineItem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Order Identifier */
  @Deprecated public java.lang.CharSequence orderId;
  /** lineNumber */
  @Deprecated public java.lang.CharSequence lineNumber;
  /** SKU  */
  @Deprecated public java.lang.CharSequence sku;
  /** Fufilling Zipcode  */
  @Deprecated public java.lang.CharSequence fulfillZipCode;
  @Deprecated public io.sellaway.cart.objects.ShippingMethodType shippingMethod;
  /** original Price   */
  @Deprecated public double originalPrice;
  /** Discount   */
  @Deprecated public double discount;
  /** sellingPrice = originalPrice - discount  */
  @Deprecated public double sellingPrice;
  /** price = sellingPrice * qty  */
  @Deprecated public double price;
  /** quantity purchased  */
  @Deprecated public double quantity;
  /** Line Item properties :key value  */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> lineItemProperties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LineItem() {}

  /**
   * All-args constructor.
   * @param orderId Order Identifier
   * @param lineNumber lineNumber
   * @param sku SKU 
   * @param fulfillZipCode Fufilling Zipcode 
   * @param shippingMethod The new value for shippingMethod
   * @param originalPrice original Price  
   * @param discount Discount  
   * @param sellingPrice sellingPrice = originalPrice - discount 
   * @param price price = sellingPrice * qty 
   * @param quantity quantity purchased 
   * @param lineItemProperties Line Item properties :key value 
   */
  public LineItem(java.lang.CharSequence orderId, java.lang.CharSequence lineNumber, java.lang.CharSequence sku, java.lang.CharSequence fulfillZipCode, io.sellaway.cart.objects.ShippingMethodType shippingMethod, java.lang.Double originalPrice, java.lang.Double discount, java.lang.Double sellingPrice, java.lang.Double price, java.lang.Double quantity, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> lineItemProperties) {
    this.orderId = orderId;
    this.lineNumber = lineNumber;
    this.sku = sku;
    this.fulfillZipCode = fulfillZipCode;
    this.shippingMethod = shippingMethod;
    this.originalPrice = originalPrice;
    this.discount = discount;
    this.sellingPrice = sellingPrice;
    this.price = price;
    this.quantity = quantity;
    this.lineItemProperties = lineItemProperties;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return lineNumber;
    case 2: return sku;
    case 3: return fulfillZipCode;
    case 4: return shippingMethod;
    case 5: return originalPrice;
    case 6: return discount;
    case 7: return sellingPrice;
    case 8: return price;
    case 9: return quantity;
    case 10: return lineItemProperties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.CharSequence)value$; break;
    case 1: lineNumber = (java.lang.CharSequence)value$; break;
    case 2: sku = (java.lang.CharSequence)value$; break;
    case 3: fulfillZipCode = (java.lang.CharSequence)value$; break;
    case 4: shippingMethod = (io.sellaway.cart.objects.ShippingMethodType)value$; break;
    case 5: originalPrice = (java.lang.Double)value$; break;
    case 6: discount = (java.lang.Double)value$; break;
    case 7: sellingPrice = (java.lang.Double)value$; break;
    case 8: price = (java.lang.Double)value$; break;
    case 9: quantity = (java.lang.Double)value$; break;
    case 10: lineItemProperties = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return Order Identifier
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * Order Identifier
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'lineNumber' field.
   * @return lineNumber
   */
  public java.lang.CharSequence getLineNumber() {
    return lineNumber;
  }


  /**
   * Sets the value of the 'lineNumber' field.
   * lineNumber
   * @param value the value to set.
   */
  public void setLineNumber(java.lang.CharSequence value) {
    this.lineNumber = value;
  }

  /**
   * Gets the value of the 'sku' field.
   * @return SKU 
   */
  public java.lang.CharSequence getSku() {
    return sku;
  }


  /**
   * Sets the value of the 'sku' field.
   * SKU 
   * @param value the value to set.
   */
  public void setSku(java.lang.CharSequence value) {
    this.sku = value;
  }

  /**
   * Gets the value of the 'fulfillZipCode' field.
   * @return Fufilling Zipcode 
   */
  public java.lang.CharSequence getFulfillZipCode() {
    return fulfillZipCode;
  }


  /**
   * Sets the value of the 'fulfillZipCode' field.
   * Fufilling Zipcode 
   * @param value the value to set.
   */
  public void setFulfillZipCode(java.lang.CharSequence value) {
    this.fulfillZipCode = value;
  }

  /**
   * Gets the value of the 'shippingMethod' field.
   * @return The value of the 'shippingMethod' field.
   */
  public io.sellaway.cart.objects.ShippingMethodType getShippingMethod() {
    return shippingMethod;
  }


  /**
   * Sets the value of the 'shippingMethod' field.
   * @param value the value to set.
   */
  public void setShippingMethod(io.sellaway.cart.objects.ShippingMethodType value) {
    this.shippingMethod = value;
  }

  /**
   * Gets the value of the 'originalPrice' field.
   * @return original Price  
   */
  public double getOriginalPrice() {
    return originalPrice;
  }


  /**
   * Sets the value of the 'originalPrice' field.
   * original Price  
   * @param value the value to set.
   */
  public void setOriginalPrice(double value) {
    this.originalPrice = value;
  }

  /**
   * Gets the value of the 'discount' field.
   * @return Discount  
   */
  public double getDiscount() {
    return discount;
  }


  /**
   * Sets the value of the 'discount' field.
   * Discount  
   * @param value the value to set.
   */
  public void setDiscount(double value) {
    this.discount = value;
  }

  /**
   * Gets the value of the 'sellingPrice' field.
   * @return sellingPrice = originalPrice - discount 
   */
  public double getSellingPrice() {
    return sellingPrice;
  }


  /**
   * Sets the value of the 'sellingPrice' field.
   * sellingPrice = originalPrice - discount 
   * @param value the value to set.
   */
  public void setSellingPrice(double value) {
    this.sellingPrice = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return price = sellingPrice * qty 
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * price = sellingPrice * qty 
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return quantity purchased 
   */
  public double getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * quantity purchased 
   * @param value the value to set.
   */
  public void setQuantity(double value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'lineItemProperties' field.
   * @return Line Item properties :key value 
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getLineItemProperties() {
    return lineItemProperties;
  }


  /**
   * Sets the value of the 'lineItemProperties' field.
   * Line Item properties :key value 
   * @param value the value to set.
   */
  public void setLineItemProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.lineItemProperties = value;
  }

  /**
   * Creates a new LineItem RecordBuilder.
   * @return A new LineItem RecordBuilder
   */
  public static io.sellaway.cart.objects.LineItem.Builder newBuilder() {
    return new io.sellaway.cart.objects.LineItem.Builder();
  }

  /**
   * Creates a new LineItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LineItem RecordBuilder
   */
  public static io.sellaway.cart.objects.LineItem.Builder newBuilder(io.sellaway.cart.objects.LineItem.Builder other) {
    if (other == null) {
      return new io.sellaway.cart.objects.LineItem.Builder();
    } else {
      return new io.sellaway.cart.objects.LineItem.Builder(other);
    }
  }

  /**
   * Creates a new LineItem RecordBuilder by copying an existing LineItem instance.
   * @param other The existing instance to copy.
   * @return A new LineItem RecordBuilder
   */
  public static io.sellaway.cart.objects.LineItem.Builder newBuilder(io.sellaway.cart.objects.LineItem other) {
    if (other == null) {
      return new io.sellaway.cart.objects.LineItem.Builder();
    } else {
      return new io.sellaway.cart.objects.LineItem.Builder(other);
    }
  }

  /**
   * RecordBuilder for LineItem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LineItem>
    implements org.apache.avro.data.RecordBuilder<LineItem> {

    /** Order Identifier */
    private java.lang.CharSequence orderId;
    /** lineNumber */
    private java.lang.CharSequence lineNumber;
    /** SKU  */
    private java.lang.CharSequence sku;
    /** Fufilling Zipcode  */
    private java.lang.CharSequence fulfillZipCode;
    private io.sellaway.cart.objects.ShippingMethodType shippingMethod;
    /** original Price   */
    private double originalPrice;
    /** Discount   */
    private double discount;
    /** sellingPrice = originalPrice - discount  */
    private double sellingPrice;
    /** price = sellingPrice * qty  */
    private double price;
    /** quantity purchased  */
    private double quantity;
    /** Line Item properties :key value  */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> lineItemProperties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.sellaway.cart.objects.LineItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[1].schema(), other.lineNumber);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sku)) {
        this.sku = data().deepCopy(fields()[2].schema(), other.sku);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.fulfillZipCode)) {
        this.fulfillZipCode = data().deepCopy(fields()[3].schema(), other.fulfillZipCode);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.shippingMethod)) {
        this.shippingMethod = data().deepCopy(fields()[4].schema(), other.shippingMethod);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.originalPrice)) {
        this.originalPrice = data().deepCopy(fields()[5].schema(), other.originalPrice);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.discount)) {
        this.discount = data().deepCopy(fields()[6].schema(), other.discount);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.sellingPrice)) {
        this.sellingPrice = data().deepCopy(fields()[7].schema(), other.sellingPrice);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.price)) {
        this.price = data().deepCopy(fields()[8].schema(), other.price);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.quantity)) {
        this.quantity = data().deepCopy(fields()[9].schema(), other.quantity);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.lineItemProperties)) {
        this.lineItemProperties = data().deepCopy(fields()[10].schema(), other.lineItemProperties);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing LineItem instance
     * @param other The existing instance to copy.
     */
    private Builder(io.sellaway.cart.objects.LineItem other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[1].schema(), other.lineNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sku)) {
        this.sku = data().deepCopy(fields()[2].schema(), other.sku);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fulfillZipCode)) {
        this.fulfillZipCode = data().deepCopy(fields()[3].schema(), other.fulfillZipCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.shippingMethod)) {
        this.shippingMethod = data().deepCopy(fields()[4].schema(), other.shippingMethod);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.originalPrice)) {
        this.originalPrice = data().deepCopy(fields()[5].schema(), other.originalPrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.discount)) {
        this.discount = data().deepCopy(fields()[6].schema(), other.discount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sellingPrice)) {
        this.sellingPrice = data().deepCopy(fields()[7].schema(), other.sellingPrice);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.price)) {
        this.price = data().deepCopy(fields()[8].schema(), other.price);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.quantity)) {
        this.quantity = data().deepCopy(fields()[9].schema(), other.quantity);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.lineItemProperties)) {
        this.lineItemProperties = data().deepCopy(fields()[10].schema(), other.lineItemProperties);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * Order Identifier
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * Order Identifier
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * Order Identifier
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * Order Identifier
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineNumber' field.
      * lineNumber
      * @return The value.
      */
    public java.lang.CharSequence getLineNumber() {
      return lineNumber;
    }


    /**
      * Sets the value of the 'lineNumber' field.
      * lineNumber
      * @param value The value of 'lineNumber'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setLineNumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.lineNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lineNumber' field has been set.
      * lineNumber
      * @return True if the 'lineNumber' field has been set, false otherwise.
      */
    public boolean hasLineNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lineNumber' field.
      * lineNumber
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearLineNumber() {
      lineNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sku' field.
      * SKU 
      * @return The value.
      */
    public java.lang.CharSequence getSku() {
      return sku;
    }


    /**
      * Sets the value of the 'sku' field.
      * SKU 
      * @param value The value of 'sku'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setSku(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sku = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sku' field has been set.
      * SKU 
      * @return True if the 'sku' field has been set, false otherwise.
      */
    public boolean hasSku() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sku' field.
      * SKU 
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearSku() {
      sku = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fulfillZipCode' field.
      * Fufilling Zipcode 
      * @return The value.
      */
    public java.lang.CharSequence getFulfillZipCode() {
      return fulfillZipCode;
    }


    /**
      * Sets the value of the 'fulfillZipCode' field.
      * Fufilling Zipcode 
      * @param value The value of 'fulfillZipCode'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setFulfillZipCode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.fulfillZipCode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'fulfillZipCode' field has been set.
      * Fufilling Zipcode 
      * @return True if the 'fulfillZipCode' field has been set, false otherwise.
      */
    public boolean hasFulfillZipCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fulfillZipCode' field.
      * Fufilling Zipcode 
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearFulfillZipCode() {
      fulfillZipCode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'shippingMethod' field.
      * @return The value.
      */
    public io.sellaway.cart.objects.ShippingMethodType getShippingMethod() {
      return shippingMethod;
    }


    /**
      * Sets the value of the 'shippingMethod' field.
      * @param value The value of 'shippingMethod'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setShippingMethod(io.sellaway.cart.objects.ShippingMethodType value) {
      validate(fields()[4], value);
      this.shippingMethod = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'shippingMethod' field has been set.
      * @return True if the 'shippingMethod' field has been set, false otherwise.
      */
    public boolean hasShippingMethod() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'shippingMethod' field.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearShippingMethod() {
      shippingMethod = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'originalPrice' field.
      * original Price  
      * @return The value.
      */
    public double getOriginalPrice() {
      return originalPrice;
    }


    /**
      * Sets the value of the 'originalPrice' field.
      * original Price  
      * @param value The value of 'originalPrice'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setOriginalPrice(double value) {
      validate(fields()[5], value);
      this.originalPrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'originalPrice' field has been set.
      * original Price  
      * @return True if the 'originalPrice' field has been set, false otherwise.
      */
    public boolean hasOriginalPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'originalPrice' field.
      * original Price  
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearOriginalPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'discount' field.
      * Discount  
      * @return The value.
      */
    public double getDiscount() {
      return discount;
    }


    /**
      * Sets the value of the 'discount' field.
      * Discount  
      * @param value The value of 'discount'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setDiscount(double value) {
      validate(fields()[6], value);
      this.discount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'discount' field has been set.
      * Discount  
      * @return True if the 'discount' field has been set, false otherwise.
      */
    public boolean hasDiscount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'discount' field.
      * Discount  
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearDiscount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellingPrice' field.
      * sellingPrice = originalPrice - discount 
      * @return The value.
      */
    public double getSellingPrice() {
      return sellingPrice;
    }


    /**
      * Sets the value of the 'sellingPrice' field.
      * sellingPrice = originalPrice - discount 
      * @param value The value of 'sellingPrice'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setSellingPrice(double value) {
      validate(fields()[7], value);
      this.sellingPrice = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sellingPrice' field has been set.
      * sellingPrice = originalPrice - discount 
      * @return True if the 'sellingPrice' field has been set, false otherwise.
      */
    public boolean hasSellingPrice() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sellingPrice' field.
      * sellingPrice = originalPrice - discount 
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearSellingPrice() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * price = sellingPrice * qty 
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * price = sellingPrice * qty 
      * @param value The value of 'price'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setPrice(double value) {
      validate(fields()[8], value);
      this.price = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * price = sellingPrice * qty 
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'price' field.
      * price = sellingPrice * qty 
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearPrice() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * quantity purchased 
      * @return The value.
      */
    public double getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * quantity purchased 
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setQuantity(double value) {
      validate(fields()[9], value);
      this.quantity = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * quantity purchased 
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'quantity' field.
      * quantity purchased 
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearQuantity() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineItemProperties' field.
      * Line Item properties :key value 
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getLineItemProperties() {
      return lineItemProperties;
    }


    /**
      * Sets the value of the 'lineItemProperties' field.
      * Line Item properties :key value 
      * @param value The value of 'lineItemProperties'.
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder setLineItemProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[10], value);
      this.lineItemProperties = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'lineItemProperties' field has been set.
      * Line Item properties :key value 
      * @return True if the 'lineItemProperties' field has been set, false otherwise.
      */
    public boolean hasLineItemProperties() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'lineItemProperties' field.
      * Line Item properties :key value 
      * @return This builder.
      */
    public io.sellaway.cart.objects.LineItem.Builder clearLineItemProperties() {
      lineItemProperties = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LineItem build() {
      try {
        LineItem record = new LineItem();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.lineNumber = fieldSetFlags()[1] ? this.lineNumber : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sku = fieldSetFlags()[2] ? this.sku : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.fulfillZipCode = fieldSetFlags()[3] ? this.fulfillZipCode : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.shippingMethod = fieldSetFlags()[4] ? this.shippingMethod : (io.sellaway.cart.objects.ShippingMethodType) defaultValue(fields()[4]);
        record.originalPrice = fieldSetFlags()[5] ? this.originalPrice : (java.lang.Double) defaultValue(fields()[5]);
        record.discount = fieldSetFlags()[6] ? this.discount : (java.lang.Double) defaultValue(fields()[6]);
        record.sellingPrice = fieldSetFlags()[7] ? this.sellingPrice : (java.lang.Double) defaultValue(fields()[7]);
        record.price = fieldSetFlags()[8] ? this.price : (java.lang.Double) defaultValue(fields()[8]);
        record.quantity = fieldSetFlags()[9] ? this.quantity : (java.lang.Double) defaultValue(fields()[9]);
        record.lineItemProperties = fieldSetFlags()[10] ? this.lineItemProperties : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LineItem>
    WRITER$ = (org.apache.avro.io.DatumWriter<LineItem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LineItem>
    READER$ = (org.apache.avro.io.DatumReader<LineItem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.orderId);

    if (this.lineNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lineNumber);
    }

    out.writeString(this.sku);

    if (this.fulfillZipCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.fulfillZipCode);
    }

    out.writeEnum(this.shippingMethod.ordinal());

    out.writeDouble(this.originalPrice);

    out.writeDouble(this.discount);

    out.writeDouble(this.sellingPrice);

    out.writeDouble(this.price);

    out.writeDouble(this.quantity);

    if (this.lineItemProperties == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.lineItemProperties.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.lineItemProperties.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        java.lang.CharSequence v0 = e0.getValue();
        out.writeString(v0);
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.lineNumber = null;
      } else {
        this.lineNumber = in.readString(this.lineNumber instanceof Utf8 ? (Utf8)this.lineNumber : null);
      }

      this.sku = in.readString(this.sku instanceof Utf8 ? (Utf8)this.sku : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.fulfillZipCode = null;
      } else {
        this.fulfillZipCode = in.readString(this.fulfillZipCode instanceof Utf8 ? (Utf8)this.fulfillZipCode : null);
      }

      this.shippingMethod = io.sellaway.cart.objects.ShippingMethodType.values()[in.readEnum()];

      this.originalPrice = in.readDouble();

      this.discount = in.readDouble();

      this.sellingPrice = in.readDouble();

      this.price = in.readDouble();

      this.quantity = in.readDouble();

      if (in.readIndex() != 1) {
        in.readNull();
        this.lineItemProperties = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.lineItemProperties; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
          this.lineItemProperties = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence k0 = null;
            k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
            java.lang.CharSequence v0 = null;
            v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
            m0.put(k0, v0);
          }
        }
      }

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8)this.orderId : null);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lineNumber = null;
          } else {
            this.lineNumber = in.readString(this.lineNumber instanceof Utf8 ? (Utf8)this.lineNumber : null);
          }
          break;

        case 2:
          this.sku = in.readString(this.sku instanceof Utf8 ? (Utf8)this.sku : null);
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fulfillZipCode = null;
          } else {
            this.fulfillZipCode = in.readString(this.fulfillZipCode instanceof Utf8 ? (Utf8)this.fulfillZipCode : null);
          }
          break;

        case 4:
          this.shippingMethod = io.sellaway.cart.objects.ShippingMethodType.values()[in.readEnum()];
          break;

        case 5:
          this.originalPrice = in.readDouble();
          break;

        case 6:
          this.discount = in.readDouble();
          break;

        case 7:
          this.sellingPrice = in.readDouble();
          break;

        case 8:
          this.price = in.readDouble();
          break;

        case 9:
          this.quantity = in.readDouble();
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lineItemProperties = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.lineItemProperties; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
              this.lineItemProperties = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
                java.lang.CharSequence v0 = null;
                v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
                m0.put(k0, v0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










